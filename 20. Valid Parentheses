
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

The brackets must close in the correct order, "()" and "()[]{}" are all valid but "(]" and "([)]" are not.


my solution:
Last unclosed, first closed, then I chosed to use stack(which inserts and removes at the same end). And at the end, need to check if the
stack is empty to see if the string is balanced

class Solution {
    public boolean isValid(String s) {
       HashMap<Character, Character> map = new HashMap<Character, Character>();
	map.put('(', ')');
	map.put('[', ']');
	map.put('{', '}');
 
	Stack<Character> list = new Stack<Character>();
        for(char curr:s.toCharArray()){
             if(map.containsKey(curr)){
                 list.push(curr);
             }
            else if(map.values().contains(curr)){
                if(!list.empty()&&map.get(list.peek())==curr){
                    list.pop();
                }else{
                    return false;
                }
            }
        }
        return list.empty();
    }
}

Better solution:

题意是判断括号匹配是否正确，很明显，我们可以用栈来解决这个问题，当出现左括号的时候入栈，当遇到右括号时，判断栈顶的左括号是否何其匹配，
不匹配的话直接返回 false 即可，最终判断是否空栈即可，这里我们可以用数组模拟栈的操作使其操作更快，有个细节注意下 top = 1;，
从而省去了之后判空的操作和 top - 1 导致数组越界的错误。

class Solution {
    public boolean isValid(String s) {
        char[] stack = new char[s.length() + 1];
        int top = 1;
        for (char c : s.toCharArray()) {
            if (c == '(' || c == '[' || c == '{') {
                stack[top++] = c; 
            } else if (c == ')' && stack[--top] != '(') {
                return false;
            } else if (c == ']' && stack[--top] != '[') {
                return false;
            } else if (c == '}' && stack[--top] != '{') {
                return false;
            }
        }
        return top == 1;
    }
}
